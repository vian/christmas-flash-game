package core {	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.*;	import flash.net.*;	import flash.geom.Rectangle;	import flash.display.DisplayObject;	import flash.display.InteractiveObject;	import field.*;	import flash.net.SharedObject;		public class LevelEditor extends MovieClip {		private static var instance:LevelEditor;				private var stoneBlocks:Sprite = new Sprite();		private var mainObjects:Sprite = new Sprite();		private var backgroundObjects:Sprite = new Sprite();				private var dragging:Boolean = false;		private var dragObj:FieldObject = null;		private var sameEvent:Boolean = false;		private var drawing:Boolean = false;		private var erasing:Boolean = false;		private var obstacles:Array;		private var otherObj:Array;		private var hasSanta:Boolean = false;		private var hasExit:Boolean = false;		private var numDoors:uint = 0;		private var so:SharedObject;				private var fieldWidth:uint = 20;		private var fieldHeight:uint = 15;				public function LevelEditor() {			instance = this;		}				public static function getInstance():LevelEditor {			if (!instance)				instance = new LevelEditor();			return instance;		}				private function init() {			so = SharedObject.getLocal("christmas_tale", "/");						stoneBlocks.visible = true;			mainObjects.visible = false;			backgroundObjects.visible = false;						var obj:FieldObject;						var i:uint = FieldObject.LEVBLOCK_LOW+1;			var nStones:uint = FieldObject.LEVBLOCK_HIGH-FieldObject.LEVBLOCK_LOW+1;			for (; i <= FieldObject.LEVBLOCK_HIGH; i++) {				obj = FieldObjectFactory.createObject(i, 0, 0);				obj.x = objectContainer.x+20+FieldObject.DIM*((i-FieldObject.LEVBLOCK_LOW)%(nStones/4));				obj.y = objectContainer.y+20+FieldObject.DIM*(uint((i-FieldObject.LEVBLOCK_LOW)/(nStones/4))+1);				stoneBlocks.addChild(obj);								obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);			}						obj = FieldObjectFactory.createObject(FieldObject.SANTA,0,0);			obj.x = objectContainer.x+20;			obj.y = objectContainer.y+20+FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.BLOCK,0,0);			obj.x = objectContainer.x+20+2*FieldObject.DIM;			obj.y = objectContainer.y+20+FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.ICE_BLOCK,0,0);			obj.x = objectContainer.x+20+4*FieldObject.DIM;			obj.y = objectContainer.y+20+FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.ICE_HOLE,0,0);			obj.x = objectContainer.x+20+6*FieldObject.DIM;			obj.y = objectContainer.y+20+FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.DOOR,0,0);			obj.x = objectContainer.x+20+8*FieldObject.DIM;			obj.y = objectContainer.y+20+FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.EXIT_TREE,0,0);			obj.x = objectContainer.x+20;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			mainObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.DEER,0,0);			obj.x = objectContainer.x+20;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.TREE_WITH_EYES,0,0);			obj.x = objectContainer.x+20+2*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SQUIRREL,0,0);			obj.x = objectContainer.x+20+4*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOWMAN_1,0,0);			obj.x = objectContainer.x+20+6*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOWMAN_2,0,0);			obj.x = objectContainer.x+20+7*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOWMAN_3,0,0);			obj.x = objectContainer.x+20+8*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.LAMP,0,0);			obj.x = objectContainer.x+20+9*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.JUMPING_BALL,0,0);			obj.x = objectContainer.x+20+10*FieldObject.DIM;			obj.y = objectContainer.y+20+2*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.RABBIT,0,0);			obj.x = objectContainer.x+20;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOWBALL_1,0,0);			obj.x = objectContainer.x+20+FieldObject.DIM;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOWBALL_2,0,0);			obj.x = objectContainer.x+20+2*FieldObject.DIM;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.FLOWER_1,0,0);			obj.x = objectContainer.x+20+3*FieldObject.DIM;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.FLOWER_2,0,0);			obj.x = objectContainer.x+20+4*FieldObject.DIM;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						obj = FieldObjectFactory.createObject(FieldObject.SNOW_BOX,0,0);			obj.x = objectContainer.x+20+5*FieldObject.DIM;			obj.y = objectContainer.y+20+3*FieldObject.DIM;			backgroundObjects.addChild(obj);			obj.addEventListener(MouseEvent.MOUSE_DOWN, onObjMouseDown);						addChild(stoneBlocks);			addChild(mainObjects);			addChild(backgroundObjects);						stoneBlocksButton.addEventListener(MouseEvent.CLICK, onStoneBlocks);			mainObjectsButton.addEventListener(MouseEvent.CLICK, onMainObjects);			backgroundObjectsButton.addEventListener(MouseEvent.CLICK, onBackgroundObjects);			eraser.addEventListener(MouseEvent.CLICK, onEraser);			clearAllButton.addEventListener(MouseEvent.CLICK, onClearAll);			changeSantaDirectionButton.addEventListener(MouseEvent.CLICK, onChangeSantaDirection);			saveLevelButton.addEventListener(MouseEvent.CLICK, onSaveLevel);						this.stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);			this.stage.addEventListener(MouseEvent.MOUSE_MOVE, onStageMouseMove);			this.stage.addEventListener(MouseEvent.MOUSE_DOWN, onStageMouseDown);						obstacles = new Array(fieldHeight);			otherObj = new Array(fieldHeight);			for (i = 0; i < fieldHeight; i++) {				obstacles[i] = new Array(fieldWidth);				otherObj[i] = new Array(fieldWidth);			}						//saveLevelDialog.visible = false;						initLoadLevelCombo();		}				private function onStoneBlocks(e:MouseEvent) {			stoneBlocks.visible = true;			mainObjects.visible = false;			backgroundObjects.visible = false;		}				private function onMainObjects(e:MouseEvent) {			stoneBlocks.visible = false;			mainObjects.visible = true;			backgroundObjects.visible = false;		}				private function onBackgroundObjects(e:MouseEvent) {			stoneBlocks.visible = false;			mainObjects.visible = false;			backgroundObjects.visible = true;		}				private function onObjMouseDown(e:MouseEvent) {			sameEvent = true;			erasing = false;						if (dragging) {				removeChild(dragObj);			}						dragging = true;			var obj:FieldObject = e.currentTarget as FieldObject;			dragObj = FieldObjectFactory.createObject(obj.getType(), 0, 0);			dragObj.x = obj.x;			dragObj.y = obj.y;			addChildAt(dragObj, 0);			dragObj.startDrag(false, new Rectangle(0,0,width,height));		}				private function onStageMouseUp(e:MouseEvent) {			if (drawing) {				drawing = false;			}		}				private function drawStep(mouseX:uint,mouseY:uint) {			if (hasSanta && dragObj.getType() == FieldObject.SANTA || hasExit && dragObj.getType() == FieldObject.EXIT_TREE)				return;						if (dragObj.getType() == FieldObject.DOOR && numDoors == 2)				return;						var grid_x:Number = mouseX-grid.x;			var grid_y:Number = mouseY-grid.y;			if (grid_x >= 0 && grid_x < grid.width && grid_y >= 0 && grid_y < grid.height) {				var i:uint = grid_y/FieldObject.DIM;				var j:uint = grid_x/FieldObject.DIM;								var obj:FieldObject = FieldObjectFactory.createObject(dragObj.getType(), 0, 0);				obj.x = grid.x+j*FieldObject.DIM;				obj.y = grid.y+(i+1)*FieldObject.DIM;				if (obj.isObstacle()) {					if (obstacles[i][j] != null) {						removeChild(obstacles[i][j]);						obstacles[i][j] = null;					}										if (obj.getType() == FieldObject.SANTA)						hasSanta = true;					obstacles[i][j] = obj;					addChild(obj);				}				else if (!obj.isObstacle()) {					if (otherObj[i][j] != null) {						removeChild(otherObj[i][j]);						otherObj[i][j] = null;					}										if (obj.getType() == FieldObject.EXIT_TREE)						hasExit = true;					else if (obj.getType() == FieldObject.DOOR)						numDoors++;											otherObj[i][j] = obj;					addChildAt(obj, 0);	// not obstacles draw first				} else					obj = null;			}		}				private function eraseStep(mouseX:uint,mouseY:uint) {			var grid_x:Number = mouseX-grid.x;			var grid_y:Number = mouseY-grid.y;			if (grid_x >= 0 && grid_x < grid.width && grid_y >= 0 && grid_y < grid.height) {				var i:uint = grid_y/FieldObject.DIM;				var j:uint = grid_x/FieldObject.DIM;								if (obstacles[i][j] != null) {					if (hasSanta && obstacles[i][j].getType() == FieldObject.SANTA)						hasSanta = false;					removeChild(obstacles[i][j]);					obstacles[i][j] = null;				} else if (otherObj[i][j] != null) {					if (hasExit && otherObj[i][j].getType() == FieldObject.EXIT_TREE)						hasExit = false;					else if (otherObj[i][j].getType() == FieldObject.DOOR)						numDoors--;										removeChild(otherObj[i][j]);					otherObj[i][j] = null;				}			}		}				private function onStageMouseMove(e:MouseEvent) {			if (drawing && !erasing) {				drawStep(e.stageX,e.stageY);			} else if (drawing && erasing) {				eraseStep(e.stageX, e.stageY);			}		}				private function onStageMouseDown(e:MouseEvent) {			if (!sameEvent && dragging) {				var grid_x:Number = mouseX-grid.x;				var grid_y:Number = mouseY-grid.y;				if (grid_x >= 0 && grid_x < grid.width && grid_y >= 0 && grid_y < grid.height) {					drawing = true;					drawStep(e.stageX,e.stageY);				} else {					dragObj.stopDrag();					removeChild(dragObj);					dragObj = null;					dragging = false;				}			}			if (erasing) {				drawing = true;				eraseStep(e.stageX, e.stageY);			}			sameEvent = false;		}				private function onEraser(e:MouseEvent) {			erasing = true;		}				private function onClearAll(e:MouseEvent) {			for (var i:uint = 0; i < fieldHeight; i++)				for (var j:uint = 0; j < fieldWidth; j++) {					if (obstacles[i][j] != null) {						removeChild(obstacles[i][j]);						obstacles[i][j] = null;					}					if (otherObj[i][j] != null) {						removeChild(otherObj[i][j]);						otherObj[i][j] = null;					}				}			hasSanta = false;			hasExit = false;			numDoors = 0;		}				private function findSanta():Santa {			if (hasSanta) {				for (var i:uint = 0; i < fieldHeight; i++) {					for (var j:uint = 0; j < fieldWidth; j++) {						if (obstacles[i][j] != null && obstacles[i][j].getType() == FieldObject.SANTA) {							return obstacles[i][j] as Santa;						}					}				}				return null;			} else				return null;		}				private function findExit():MiscObject {			if (hasExit) {				for (var i:uint = 0; i < fieldHeight; i++) {					for (var j:uint = 0; j < fieldWidth; j++) {						if (otherObj[i][j] != null && otherObj[i][j].getType() == FieldObject.EXIT_TREE) {							return otherObj[i][j] as MiscObject;						}					}				}				return null;			} else				return null;		}				private function onChangeSantaDirection(e:MouseEvent) {			var s:Santa = findSanta();			if (s.isLookingLeft)				s.gotoAndStop("going_r");			else				s.gotoAndStop("going_l");			s.isLookingLeft = !s.isLookingLeft;		}				private function onSaveLevel(e:MouseEvent) {			if (findSanta() != null && findExit() != null && (numDoors == 0 || numDoors == 2)) {				var s:String = fieldWidth.toString()+" "+fieldHeight.toString()+" "+					(findSanta().isLookingLeft ? 1 : 0).toString()+" 0\n";								var i:uint;				var j:uint;				for (i = 0; i < fieldHeight; i++) {					for (j = 0; j < fieldWidth; j++)						s += (otherObj[i][j] != null ? otherObj[i][j].getType().toString() : "0") + " ";					s += "\n";				}				for (i = 0; i < fieldHeight; i++) {					for (j = 0; j < fieldWidth; j++)						s += (obstacles[i][j] != null ? obstacles[i][j].getType().toString() :"0") + " ";					s += "\n";				}								var levelNum:String = loadLevelCombo.selectedItem.label.match(/\d+/)[0];				if (levelNum != null) {					// TODO: post s to server for levelNum				}			}		}				private function initLoadLevelCombo() {			loadLevelCombo.prompt = "Load level...";			loadLevelCombo.removeAll();			for (var i:uint = 1; i <= 30; i++)				loadLevelCombo.addItem({label: "Level "+i.toString()});			if (!loadLevelCombo.hasEventListener(Event.CHANGE)) {				loadLevelCombo.addEventListener(Event.CHANGE, onLevelChange);			}		}				private function onLevelChange(e:Event) {			loadData("./levels/level"+ loadLevelCombo.selectedItem.label.match(/\d+/)[0] + ".txt");		}				public function loadData(url:String) {							var loader:URLLoader = new URLLoader();						loader.addEventListener(Event.COMPLETE, onDataComplete);			loader.addEventListener(Event.OPEN, onDataOpen);			loader.addEventListener(ProgressEvent.PROGRESS, onDataProgress);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onDataSecurityError);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onDataHttpStatus);			loader.addEventListener(IOErrorEvent.IO_ERROR, onDataIOError);						var request:URLRequest = new URLRequest(url);			try {				loader.load(request);			} catch (error:Error) {				trace("Unable to GameField.loadData() with "+request.url);			}		}				private function onDataComplete(event:Event) {			var loader:URLLoader = URLLoader(event.target);			trace("onDataComplete: "/* + loader.data*/);						onClearAll(null);			var sData:Array = loader.data.split(/\s+/);			var obj:FieldObject;			for (var i:uint = 0; i < fieldWidth*fieldHeight; i++) {				if (sData[i+4] != null) {					obj = FieldObjectFactory.createObject(sData[i+4], 0, 0);					obj.x = grid.x+FieldObject.DIM * (i%fieldWidth);					obj.y = grid.y+FieldObject.DIM * (uint(i/fieldWidth)+1);					addChild(obj);					if (obj.getType() == FieldObject.EXIT_TREE)						hasExit = true;					if (obj.getType() == FieldObject.DOOR)						numDoors++;				} else					obj = null;				otherObj[uint(i/fieldWidth)][i%fieldWidth] = obj;			}						for (i = 0; i < fieldWidth*fieldHeight; i++) {				if (sData[i+4+fieldWidth*fieldHeight] != null) {					obj = FieldObjectFactory.createObject(sData[i+4+fieldWidth*fieldHeight], 0, 0);					obj.x = grid.x+FieldObject.DIM * (i%fieldWidth);					obj.y = grid.y+FieldObject.DIM * (uint(i/fieldWidth)+1);					addChild(obj);					if (obj.getType() == FieldObject.SANTA)						hasSanta = true;				} else					obj = null;				obstacles[uint(i/fieldWidth)][i%fieldWidth] = obj;			}		}				private function onDataOpen(event:Event):void {			trace("onDataOpen");		}				private function onDataProgress(event:ProgressEvent):void {			trace("onDataProgress");		}				private function onDataSecurityError(event:SecurityErrorEvent):void {			trace("onDataSecurityError");		}				private function onDataHttpStatus(event:HTTPStatusEvent):void {			trace("onDataHttpStatus");		}				private function onDataIOError(event:IOErrorEvent):void {			trace("onDataIOError");		}	}}