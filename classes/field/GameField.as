package field {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.geom.Rectangle;	import flash.events.*;	import flash.net.*;	import flash.ui.Keyboard;	import core.Game;	import field.*;	import core.Sounds;		public class GameField extends MovieClip {		private static var instance:GameField;		private var fieldData:Array;		private var obstacleData:Array;		private var movingIceBlocks:Array;		private var fallingBlocks:Array;		private var fieldWidth:uint;		private var fieldHeight:uint;		private var isActive:Boolean;		private var santa:Santa;		private var doors:Array;		private var loaderCallback:Function;		private var blockWait:Boolean;		private var blockFrame:uint;		private var isGameEnd:Boolean;		private var snowStorm1:SnowStorm;		private var snowStorm2:SnowStorm;						public static const NFRAMES_BLOCKWAIT:uint = 8;				public function GameField() {			instance = this;			fieldWidth = 0;			fieldHeight = 0;			isActive = false;			blockWait = false;			blockFrame = 0;			snowStorm1 = new SnowStorm(300, new Rectangle(0, 0, 640, 480), 50, 350);			snowStorm2 = new SnowStorm(300, new Rectangle(0, 0, 640, 480), -100, 50);							this.addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				public static function getInstance():GameField {			if (!GameField.instance)				GameField.instance = new GameField();							return GameField.instance;		}				public function activate():void {			isActive = true;		}				public function pause():void {			isActive = false;		}				public function get active():Boolean {			return isActive;		}				public function loadData(url:String, callback:Function = null) {			loaderCallback = callback;									var loader:URLLoader = new URLLoader();						loader.addEventListener(Event.COMPLETE, onDataComplete);			loader.addEventListener(Event.OPEN, onDataOpen);			loader.addEventListener(ProgressEvent.PROGRESS, onDataProgress);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onDataSecurityError);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onDataHttpStatus);			loader.addEventListener(IOErrorEvent.IO_ERROR, onDataIOError);						var request:URLRequest = new URLRequest(url);			try {				loader.load(request);			} catch (error:Error) {				trace("Unable to GameField.loadData() with "+request.url);			}		}				public function onDataComplete(event:Event) {			var loader:URLLoader = URLLoader(event.target);			trace("onDataComplete: "/* + loader.data*/);						isGameEnd = false;						clearField();						this.addChild(snowStorm1);						var sData:Array = loader.data.split(/\s+/);			fieldWidth = uint(sData[0]);			fieldHeight = uint(sData[1]);			fieldData = new Array(fieldHeight);			obstacleData = new Array(fieldHeight);			for (var i:uint = 0; i < fieldHeight; i++) {				fieldData[i] = new Array(fieldWidth);				obstacleData[i] = new Array(fieldWidth);			}						doors = new Array();			for (i = 0; i < fieldWidth*fieldHeight; i++) {					customAddObjectFromLevelArray(sData, i, false);			}			for (i = 0; i < fieldWidth*fieldHeight; i++) {					customAddObjectFromLevelArray(sData, i+fieldWidth*fieldHeight, true);			}						this.addChild(snowStorm2);						// Only two doors allowed per level			if (doors.length == 2) {				doors[0].exit = doors[1];				doors[1].exit = doors[0];			}						blockWait = false;			blockFrame = 0;						movingIceBlocks = new Array();			fallingBlocks = new Array();						loaderCallback();		}				private function customAddObjectFromLevelArray(sData:Array, i:uint, isObstacle:Boolean) {			var ix:uint = (i%(fieldWidth*fieldHeight))/fieldWidth;			var jx:uint = (i%(fieldWidth*fieldHeight))%fieldWidth;			var obj:FieldObject = FieldObjectFactory.createObject(sData[i+4], ix, jx);			if (isObstacle) {				obstacleData[ix][jx] = obj;			} else {				fieldData[ix][jx] = obj;			}			this.addChild(obj);						if (obj.getType() == FieldObject.SANTA) {				santa = obj as Santa;				santa.isLookingLeft = (uint(sData[2])==1);				if (santa.isLookingLeft)					santa.gotoAndStop("going_l");				else					santa.gotoAndStop("going_r");			}						if (obj.getType() == FieldObject.DOOR) {				doors.push(obj as Door);			}		}				private function addObjectFromLevelArray(sData:Array, i:uint) {			var ix:uint = (i%(fieldWidth*fieldHeight))/fieldWidth;			var jx:uint = (i%(fieldWidth*fieldHeight))%fieldWidth;			var obj:FieldObject = FieldObjectFactory.createObject(sData[i+4], ix, jx);			if (obj.isObstacle()) {				fieldData[ix][jx] = FieldObjectFactory.createObject(0, ix, jx);				obstacleData[ix][jx] = obj;			} else {				fieldData[ix][jx] = obj;				obstacleData[ix][jx] = FieldObjectFactory.createObject(0, ix, jx);			}			this.addChild(obj);						if (obj.getType() == FieldObject.SANTA) {				santa = obj as Santa;				santa.isLookingLeft = (uint(sData[2])==1);				if (santa.isLookingLeft)					santa.gotoAndStop("going_l");				else					santa.gotoAndStop("going_r");			}						if (obj.getType() == FieldObject.DOOR) {				doors.push(obj as Door);			}		}				public function clearField():void {			if (fieldWidth != 0 && fieldHeight != 0) {				this.removeEventListener(Event.ENTER_FRAME, onEnterFrame);								var i:uint;				var j:uint;				while (this.numChildren)					this.removeChildAt(0);				for (i = 0; i < fieldHeight; i++) {					for (j = 0; j < fieldWidth; j++) {						fieldData[i][j] = null;						obstacleData[i][j] = null;					}					fieldData[i] = null;					obstacleData[i] = null;				}				fieldWidth = 0;				fieldHeight = 0;								this.addEventListener(Event.ENTER_FRAME, onEnterFrame);			}		}				private function onEnterFrame(event:Event) {			if (isActive) {				processSantaJump();				processSantaMove();				processSantaTurn();				processSantaFall();				processSantaPush();				processSantaTake();				processSantaDrop();								processFallingBlocks();				processIceBlocks();								var nearExit:Boolean = false;				if (santa.getJ() < fieldWidth-1 && fieldData[santa.getI()][santa.getJ()+1].getType() == FieldObject.EXIT_TREE) {					fieldData[santa.getI()][santa.getJ()+1].gotoAndPlay("tree_activate");					nearExit = true;				}				else if (santa.getJ() > 1 && fieldData[santa.getI()][santa.getJ()-2].getType() == FieldObject.EXIT_TREE) {					fieldData[santa.getI()][santa.getJ()-2].gotoAndPlay("tree_activate");					nearExit = true;				}				else if (santa.getJ() > 0 && fieldData[santa.getI()][santa.getJ()-1].getType() == FieldObject.EXIT_TREE) {					fieldData[santa.getI()][santa.getJ()-1].gotoAndPlay("tree_activate");					nearExit = true;				}				else if (fieldData[santa.getI()][santa.getJ()].getType() == FieldObject.EXIT_TREE) {					fieldData[santa.getI()][santa.getJ()].gotoAndPlay("tree_activate");					nearExit = true;				}								if (nearExit) {						pause();						isGameEnd = true;						Sounds.getInstance().playSound("complete");						if (santa.isLookingLeft)							santa.gotoAndPlay("exit_l");						else 							santa.gotoAndPlay("exit_r");				}								var squirrel:MiscObject = null;				if (fieldData[santa.getI()][santa.getJ()].getType() == FieldObject.SQUIRREL)					squirrel = fieldData[santa.getI()][santa.getJ()];				else if (santa.getJ() > 0 && fieldData[santa.getI()][santa.getJ()-1].getType() == FieldObject.SQUIRREL)					squirrel = fieldData[santa.getI()][santa.getJ()-1];				if (squirrel != null)					squirrel.gotoAndPlay("squirrel_hide");			}		}				private function processSantaJump():void {			if (santa.isJumping) {				var destI:uint = santa.getI() + 					((!santa.isGoingUp && 					!obstacleData[santa.getI()][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle()) ? 0 : -1);				var destJ:uint = santa.getJ() + (santa.isGoingUp ? 0 : (santa.isLookingLeft ? -1 : 1));								if (santa.moveFrame < Santa.NFRAMES_JUMP) {					if (!santa.isGoingUp)						santa.x += (santa.isLookingLeft ? -1 : 1) * FieldObject.DIM/Santa.NFRAMES_JUMP;					if (!santa.isGoingUp && 						!obstacleData[santa.getI()][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle()) {						santa.y -= 10 - 3*santa.moveFrame;						} else						santa.y -= 12 - 2.5*santa.moveFrame;					if (santa.block != null) {						santa.block.x = santa.x;						santa.block.y = santa.y - FieldObject.DIM;					}					santa.moveFrame++;				}				if (santa.moveFrame == Santa.NFRAMES_JUMP) {					santa.isJumping = false;					santa.setIJ(destI, destJ);					santa.x = destJ*FieldObject.DIM;					santa.y = (destI+1)*FieldObject.DIM;					if (santa.block != null) {						santa.block.x = santa.x;						santa.block.y = santa.y - FieldObject.DIM;					}					if (santa.getI() < fieldHeight-1 && !obstacleData[santa.getI()+1][santa.getJ()].isObstacle())						santa.fallMe();				}			}		}				private function processSantaMove():void {			if (santa.isMoving) {				if (santa.moveFrame < Santa.NFRAMES_MOVE) {					santa.x += (santa.isLookingLeft ? -1 : 1) * FieldObject.DIM/Santa.NFRAMES_MOVE;					if (santa.block != null)						santa.block.x = santa.x;					santa.moveFrame++;				} 				if (santa.moveFrame == Santa.NFRAMES_MOVE) {					santa.isMoving = false;					santa.setIJ(santa.getI(), santa.getJ()+(santa.isLookingLeft ? -1 : 1));				}			}		}				private function processSantaTurn():void {			if (santa.isTurning) {				if (santa.moveFrame < Santa.NFRAMES_TURN) {					santa.moveFrame++;				}				if (santa.moveFrame == Santa.NFRAMES_TURN) {					santa.isTurning = false;					santa.isLookingLeft = !santa.isLookingLeft;				}			}		}				private function processSantaFall():void {			if (!santa.isTurning && !santa.isMoving && !santa.isFalling && !santa.isJumping && !santa.isPushing &&				!santa.isTaking && !santa.isDropping && !santa.isTeleporting &&				santa.getI() < fieldHeight-1 && !obstacleData[santa.getI()+1][santa.getJ()].isObstacle()) {					santa.fallMe();			}						if (santa.isFalling) {				santa.y += 8 + 2*santa.moveFrame;				var curI:uint = uint(santa.y/FieldObject.DIM);				if (curI >= fieldHeight-1 || obstacleData[curI][santa.getJ()].isObstacle()) {					santa.isFalling = false;					santa.setIJ(curI-1, santa.getJ());					santa.y = (curI)*FieldObject.DIM;										if (santa.getI() - santa.fallFrom > 1 && 						santa.getI() < fieldHeight-1 && obstacleData[santa.getI()+1][santa.getJ()].isSnowy()) {							Sounds.getInstance().playSound("splash");							addChild(new Splash(santa.getJ()*FieldObject.DIM, (santa.getI()+1)*FieldObject.DIM));					}					else						Sounds.getInstance().playSound("drop");				}				if (santa.block != null)					santa.block.y = santa.y - FieldObject.DIM;				santa.moveFrame++;			}		}				private function processSantaPush():void {			if (santa.isPushing) {				if (santa.moveFrame < Santa.NFRAMES_PUSH)					santa.moveFrame++;				if (santa.moveFrame == Santa.NFRAMES_PUSH)					santa.isPushing = false;			}		}				private function processSantaTake():void {			if (santa.isTaking) {				if (santa.moveFrame < Santa.NFRAMES_TAKE) {					santa.block.x -= (santa.isLookingLeft ? -1 : 1) * FieldObject.DIM/Santa.NFRAMES_TAKE;					santa.block.y -= 8 - 0.3 * santa.moveFrame;					if (santa.block.y < santa.getI()*FieldObject.DIM)						santa.block.y = santa.getI()*FieldObject.DIM;					santa.moveFrame++;				}				if (santa.moveFrame == Santa.NFRAMES_TAKE) {					santa.isTaking = false;				}			}		}				private function processSantaDrop():void {			if (santa.isDropping) {				if (santa.moveFrame < Santa.NFRAMES_DROP) {					santa.block.x += (santa.isLookingLeft ? -1 : 1) * FieldObject.DIM/Santa.NFRAMES_DROP;					if (santa.getI() == santa.block.getI()) {						santa.block.y += santa.moveFrame;						if (santa.block.y > (santa.block.getI()+1)*FieldObject.DIM)							santa.block.y = (santa.block.getI()+1)*FieldObject.DIM;					}					santa.moveFrame++;				}				if (santa.moveFrame == Santa.NFRAMES_DROP) {					santa.isDropping = false;					if (santa.block.y != (santa.block.getI()+1)*FieldObject.DIM)						santa.block.y = (santa.block.getI()+1)*FieldObject.DIM;					if (santa.block.getI() < fieldHeight-1 && 						!obstacleData[santa.block.getI()+1][santa.block.getJ()].isObstacle()) {							fallingBlocks.push(santa.block);							santa.block.isFalling = true;							santa.block.moveFrame = 0;							blockWait = true;							blockFrame = 0;					} else {						Sounds.getInstance().playSound("drop");					}					santa.block = null;				}			}		}				private function processIceBlocks():void {			for (var i:uint = 0; i < movingIceBlocks.length; i++) {				var block:IceBlock = movingIceBlocks[i];				if (block.isMoving) {					if (block.isFalling) {						block.y += 2*block.moveFrame;						block.moveFrame++;						var curI:uint = uint(block.y/FieldObject.DIM);						block.setIJ(curI-1, block.getJ());						if (curI >= fieldHeight-1 || obstacleData[curI][block.getJ()].isObstacle()) {							block.isFalling = false;														if (block.getI()-block.fallFrom > 1 &&								block.getI() < fieldHeight-1 && obstacleData[block.getI()+1][block.getJ()].isSnowy()) {									Sounds.getInstance().playSound("splash");									addChild(new Splash(block.getJ()*FieldObject.DIM, (block.getI()+1)*FieldObject.DIM));							} else								Sounds.getInstance().playSound("drop");															block.y = (curI)*FieldObject.DIM;														if (((block.isLookingLeft && block.getJ() > 0) || 								(!block.isLookingLeft && block.getJ() < fieldWidth-1)) &&								!obstacleData[block.getI()][block.getJ()+(block.isLookingLeft ? -1 : 1)].isObstacle() &&								fieldData[block.getI()][block.getJ()+(block.isLookingLeft ? -1 : 1)].getType() != FieldObject.DOOR) {									block.moveFrame = 0;							} else {								block.isMoving = false;							}						}					} else {						if (block.moveFrame < IceBlock.NFRAMES_MOVE) {							block.x += (block.isLookingLeft ? -1 : 1) * FieldObject.DIM/IceBlock.NFRAMES_MOVE;							block.moveFrame++;						}					}										if (!block.isFalling && block.isMoving) {						if (block.moveFrame == IceBlock.NFRAMES_MOVE) {							block.setIJ(block.getI(), block.getJ()+(block.isLookingLeft ? -1 : 1));														if (block.getI() < fieldHeight-1 && !obstacleData[block.getI()+1][block.getJ()].isObstacle()) {								block.isFalling = true;								block.fallFrom = block.getI();								block.moveFrame = 0;							} else {								if (((block.isLookingLeft && block.getJ() > 0) || 									(!block.isLookingLeft && block.getJ() < fieldWidth-1)) &&									!obstacleData[block.getI()][block.getJ()+(block.isLookingLeft ? -1 : 1)].isObstacle() &&									fieldData[block.getI()][block.getJ()+(block.isLookingLeft ? -1 : 1)].getType() != FieldObject.DOOR) {										block.moveFrame = 0;								} else {									block.isMoving = false;								}							}						}					}				} else {					movingIceBlocks.splice(i, 1);				}			}		}				private function processFallingBlocks():void {			if (blockWait) {				blockFrame++;				if (blockFrame == NFRAMES_BLOCKWAIT) {					blockWait = false;					blockFrame = 0;				}			}						for (var i:uint = 0; i < fallingBlocks.length; i++) {				var block:Block = fallingBlocks[i];								if (block.isFalling) {					block.y += 2*block.moveFrame;					var curI:uint = uint(block.y/FieldObject.DIM);					block.setIJ(curI-1, block.getJ());					if (curI >= fieldHeight-1 || obstacleData[curI][block.getJ()].isObstacle()) {						block.isFalling = false;						block.y = (curI)*FieldObject.DIM;						if (block.getI() < fieldHeight-1 && obstacleData[block.getI()+1][block.getJ()].isSnowy()) {							Sounds.getInstance().playSound("splash");							addChild(new Splash(block.getJ()*FieldObject.DIM, (block.getI()+1)*FieldObject.DIM));						} else							Sounds.getInstance().playSound("drop");					}					block.moveFrame++;				} else {					fallingBlocks.splice(i, 1);				}			}		}				public function receiveInput():Boolean {			return (isActive && !santa.isTurning && !santa.isMoving && !santa.isFalling && !santa.isJumping && !santa.isPushing &&				!santa.isTaking && !santa.isDropping && !santa.isTeleporting && 				!blockWait);		}				public function keyDownHandler(event:KeyboardEvent) {			if (receiveInput()) {				if (event.keyCode == Keyboard.LEFT) {					if (santa.isLookingLeft && santa.getJ() > 0 && !obstacleData[santa.getI()][santa.getJ()-1].isObstacle()) {						if (santa.block != null && !obstacleData[santa.getI()-1][santa.getJ()-1].isObstacle()) {							santa.moveMe();							Sounds.getInstance().playSound("move");						}						else if (santa.block == null) {							santa.moveMe();							Sounds.getInstance().playSound("move");						}					}					if (!santa.isLookingLeft)						santa.turnMe();				} else				if(event.keyCode == Keyboard.RIGHT) {					if (!santa.isLookingLeft && santa.getJ() < fieldWidth-1 &&						!obstacleData[santa.getI()][santa.getJ()+1].isObstacle()) {							if (santa.block != null && !obstacleData[santa.getI()-1][santa.getJ()+1].isObstacle()) {								santa.moveMe();								Sounds.getInstance().playSound("move");							}							else if (santa.block == null) {								santa.moveMe();								Sounds.getInstance().playSound("move");							}					}					if (santa.isLookingLeft)						santa.turnMe();				} else				if (event.keyCode == Keyboard.UP) {					if (santa.getI() > 0 && !obstacleData[santa.getI()-1][santa.getJ()].isObstacle()) {						if (santa.block != null && santa.getI() > 1 && 							!obstacleData[santa.getI()-2][santa.getJ()].isObstacle()) {								if (((santa.isLookingLeft && santa.getJ() > 0) || 									 (!santa.isLookingLeft && santa.getJ() < fieldWidth-1)) && 									!obstacleData[santa.getI()-1][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle() &&									!obstacleData[santa.getI()-2][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle())										santa.isGoingUp = false;								else									santa.isGoingUp = true;								santa.jumpMe();								Sounds.getInstance().playSound("bounce");						}						else if (santa.block == null) {							if (((santa.isLookingLeft && santa.getJ() > 0) || 								 (!santa.isLookingLeft && santa.getJ() < fieldWidth-1)) && 								!obstacleData[santa.getI()-1][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle())									santa.isGoingUp = false;							else								santa.isGoingUp = true;							santa.jumpMe();							Sounds.getInstance().playSound("bounce");						}					}				} else				if (event.keyCode == Keyboard.SPACE) {					if (santa.block != null) {						if ((santa.isLookingLeft && santa.getJ() > 0) || (!santa.isLookingLeft && santa.getJ() < fieldWidth-1)) {							if (!obstacleData[santa.getI()-1][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle()) {								if (!obstacleData[santa.getI()][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle()) {									santa.block.setIJ(santa.getI(), santa.getJ()+(santa.isLookingLeft ? -1 : 1));								} else {									santa.block.setIJ(santa.getI()-1, santa.getJ()+(santa.isLookingLeft ? -1 : 1));								}								santa.drop();							}						}					} else {						if ((santa.isLookingLeft && santa.getJ() > 0) || (!santa.isLookingLeft && santa.getJ() < fieldWidth-1)) {							var obj:FieldObject = obstacleData[santa.getI()][santa.getJ()+(santa.isLookingLeft ? -1 : 1)];							if (obj.getType() == FieldObject.ICE_BLOCK) {								var iceBlock:IceBlock = obj as IceBlock;								santa.pushBlock();								Sounds.getInstance().playSound("push");								if (((santa.isLookingLeft && iceBlock.getJ() > 0) || 									(!santa.isLookingLeft && iceBlock.getJ() < fieldWidth-1)) &&									!obstacleData[iceBlock.getI()][iceBlock.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle()) {										movingIceBlocks.push(iceBlock);										iceBlock.isLookingLeft = santa.isLookingLeft;										iceBlock.isMoving = true;										iceBlock.moveFrame = 0;								}							} else							if (obj.getType() == FieldObject.BLOCK) {								if (santa.getI() > 0 && 									!obstacleData[santa.getI()-1][santa.getJ()+(santa.isLookingLeft ? -1 : 1)].isObstacle() &&									!obstacleData[santa.getI()-1][santa.getJ()].isObstacle()) {										santa.block = obj as Block;										obstacleData[santa.getI()][santa.getJ()+(santa.isLookingLeft ? -1 : 1)] = obj.getNullObj();										santa.take();										Sounds.getInstance().playSound("get");								}							}						}					}				}			}		}				private function onDataOpen(event:Event):void {			trace("onDataOpen");		}				private function onDataProgress(event:ProgressEvent):void {			trace("onDataProgress");		}				private function onDataSecurityError(event:SecurityErrorEvent):void {			trace("onDataSecurityError");		}				private function onDataHttpStatus(event:HTTPStatusEvent):void {			trace("onDataHttpStatus");		}				private function onDataIOError(event:IOErrorEvent):void {			trace("onDataIOError");		}				public function get santaInstance():Santa {			return santa;		}				public function get fieldDataArray():Array {			return fieldData;		}				public function get obstacleDataArray():Array {			return obstacleData;		}				public function get fieldH():uint {			return fieldHeight;		}				public function get fieldW():uint {			return fieldWidth;		}				public function get gameEnd():Boolean {			return isGameEnd;		}	}}