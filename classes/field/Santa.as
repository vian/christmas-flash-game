package field {	import field.FieldObject;	import field.GameField;	import core.Sounds;		public class Santa extends FieldObject {		public var isMoving:Boolean;		public var isFalling:Boolean;		public var isJumping:Boolean;		public var isGoingUp:Boolean;		public var isTurning:Boolean;		public var isPushing:Boolean;		public var isTaking:Boolean;		public var isDropping:Boolean;		public var isTeleporting:Boolean;		public var isLookingLeft:Boolean;		public var block:Block;		public var moveFrame:uint;		public var fallFrom:uint;				public static const NFRAMES_MOVE:uint = 8;		public static const NFRAMES_TURN:uint = 8;		public static const NFRAMES_JUMP:uint = 8;		public static const NFRAMES_PUSH:uint = 8;		public static const NFRAMES_TAKE:uint = 8;		public static const NFRAMES_DROP:uint = 8;				public function Santa(ix:uint=0, jx:uint=0) {			super(FieldObject.SANTA, ix, jx, false);			this.isLookingLeft = false;			this.isMoving = false;			this.isFalling = false;			this.isJumping = false;			this.isTurning = false;			this.isGoingUp = false;			this.isPushing = false;			this.isTaking = false;			this.isDropping = false;			this.isTeleporting = false;			this.block = null;		}				public function moveMe():void {			var f:GameField = GameField.getInstance();			if (ix < f.fieldH-1 && 				f.obstacleDataArray[ix+1][jx].getType() == FieldObject.ICE_HOLE) {					(f.obstacleDataArray[ix+1][jx] as IceHole).play();					Sounds.getInstance().playSound("hole");			}						this.isMoving = true;			this.moveFrame = 0;			if (isLookingLeft && block == null)				this.gotoAndPlay("going_l");			else			if (!isLookingLeft && block == null)				this.gotoAndPlay("going_r");			else			if (isLookingLeft && block != null)				this.gotoAndPlay("carry_l");			else			if (!isLookingLeft && block != null)				this.gotoAndPlay("carry_r");		}				public function turnMe():void {			this.isTurning = true;			this.moveFrame = 0;			if (isLookingLeft && block == null)				this.gotoAndPlay("turn_lr");			else			if (!isLookingLeft && block == null)				this.gotoAndPlay("turn_rl");			else			if (isLookingLeft && block != null) {				this.gotoAndPlay("cturn_lr");				this.block.gotoAndPlay("turn_lr");			}			else			if (!isLookingLeft && block != null) {				this.gotoAndPlay("cturn_rl");				this.block.gotoAndPlay("turn_rl");			}		}				public function fallMe():void {			this.isFalling = true;			this.moveFrame = 0;			fallFrom = ix;		}				public function jumpMe():void {			var f:GameField = GameField.getInstance();			if (ix < f.fieldH-1 && 				f.obstacleDataArray[ix+1][jx].getType() == FieldObject.ICE_HOLE) {					(f.obstacleDataArray[ix+1][jx] as IceHole).play();					Sounds.getInstance().playSound("hole");			}						this.isJumping = true;			this.moveFrame = 0;						if (isLookingLeft && block == null)				this.gotoAndPlay("going_l");			else			if (!isLookingLeft && block == null)				this.gotoAndPlay("going_r");			else			if (isLookingLeft && block != null)				this.gotoAndPlay("carry_l");			else			if (!isLookingLeft && block != null)				this.gotoAndPlay("carry_r");		}				public function pushBlock():void {			this.isPushing = true;			this.moveFrame = 0;			if (isLookingLeft)				this.gotoAndPlay("push_l");			else				this.gotoAndPlay("push_r");		}				public function take():void {			this.isTaking = true;			this.moveFrame = 0;			if (isLookingLeft)				this.gotoAndPlay("take_l");			else				this.gotoAndPlay("take_r");		}				public function drop():void {			this.isDropping = true;			this.moveFrame = 0;			if (isLookingLeft)				this.gotoAndPlay("drop_l");			else				this.gotoAndPlay("drop_r");		}				public override function setIJ(i:uint, j:uint):void {			super.setIJ(i, j);						if (!isTeleporting && block == null && GameField.getInstance().fieldDataArray[ix][jx].getType() == FieldObject.DOOR) {				this.visible = false;				this.isTeleporting = true;				GameField.getInstance().fieldDataArray[ix][jx].gotoAndPlay("in");				Sounds.getInstance().playSound("teleport");			}		}	}}