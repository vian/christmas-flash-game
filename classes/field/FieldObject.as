package field {	import flash.display.MovieClip;	import flash.text.TextField;		public class FieldObject extends MovieClip {		public static const DIM:uint = 32;				public static const EMPTY:uint = 0;		public static const BLOCK:uint = 2;		public static const DEER:uint = 3;		public static const RABBIT:uint = 4;		public static const SNOWMAN_1:uint = 5;		public static const LAMP:uint = 6;		public static const SNOWMAN_2:uint = 7;		public static const JUMPING_BALL:uint = 8;		public static const SANTA:uint = 9;		public static const TREE_WITH_EYES:uint = 10;		public static const SQUIRREL:uint = 11;		public static const ICE_BLOCK:uint = 12;		public static const ICE_HOLE:uint = 13;		public static const DOOR:uint = 14;		public static const EXIT_TREE:uint = 15;		public static const SNOWBALL_1:uint = 16;		public static const SNOWMAN_3:uint = 17;		public static const FLOWER_1:uint = 18;		public static const SNOW_BOX:uint = 19;		public static const LEVBLOCK_LOW:uint = 20;		public static const LEVBLOCK_HIGH:uint = 63;		public static const FLOWER_2:uint = 70;		public static const SNOWBALL_2:uint = 71;				protected var type:uint;		protected var ix:uint;		protected var jx:uint;		protected var txt:TextField;		protected var needDraw:Boolean;		protected var nullObj:FieldObject;				public static function drawFirst(type:uint):Boolean {			return ((type >= FieldObject.LEVBLOCK_LOW && type <= FieldObject.LEVBLOCK_HIGH) ||				type == FieldObject.DOOR ||				type == FieldObject.EXIT_TREE || type == FieldObject.LAMP || type == FieldObject.FLOWER_1 || 				type == FieldObject.SNOW_BOX || type == FieldObject.FLOWER_2 || type == FieldObject.SNOWBALL_2 || 				type == FieldObject.SNOWMAN_1 || type == FieldObject.SNOWMAN_2 || type == FieldObject.JUMPING_BALL ||				type == FieldObject.SNOWMAN_3 || type == FieldObject.SQUIRREL || type == FieldObject.TREE_WITH_EYES ||				type == FieldObject.DEER || type == FieldObject.RABBIT || type == FieldObject.SNOWBALL_1			);		}				public function FieldObject(type:uint, ix:uint, jx:uint, needDraw:Boolean) {			this.type = type;			if (isMovable())				nullObj = new FieldObject(0, ix, jx, false);			this.ix = ix;			this.jx = jx;			this.needDraw = needDraw;						this.x = jx*FieldObject.DIM;			this.y = (ix+1)*FieldObject.DIM;						if (needDraw && type != 0) {				this.txt = new TextField();				this.txt.multiline = false;				this.txt.text = type.toString();				this.txt.y -= FieldObject.DIM;				this.addChild(txt);								drawObject();			}		}				private function drawObject():void {			this.graphics.clear();			if (this.type != 0) {				this.graphics.lineStyle(1, 0x000000, 1.0);				this.graphics.drawRect(0, -FieldObject.DIM+1, FieldObject.DIM, FieldObject.DIM);			}		}				public function getType():uint {			return type;		}				public function getNullObj():FieldObject {			return nullObj;		}				public function getI():uint {			return this.ix;		}				public function getJ():uint {			return this.jx;		}				public function setIJ(i:uint, j:uint):void {			if (isMovable()) {				GameField.getInstance().obstacleDataArray[ix][jx] = nullObj;				nullObj = GameField.getInstance().obstacleDataArray[i][j];				GameField.getInstance().obstacleDataArray[i][j] = this;				this.ix = i;				this.jx = j;			}		}				public function isObstacle():Boolean {			return ((type >= LEVBLOCK_LOW && type <= LEVBLOCK_HIGH) || type == BLOCK || type == ICE_BLOCK || type == ICE_HOLE || type == SANTA);		}				public function isMovable():Boolean {			return (type == SANTA || type == BLOCK || type == ICE_BLOCK || type == ICE_HOLE);		}				public function isSnowy():Boolean {			return ((type >= LEVBLOCK_LOW+1 && type <= LEVBLOCK_LOW+14) || type == LEVBLOCK_LOW+18 || type == LEVBLOCK_LOW+19 ||				type == LEVBLOCK_LOW+22 || type == LEVBLOCK_LOW+23 || type == LEVBLOCK_LOW+24 ||				(type >= LEVBLOCK_LOW+31 && type <= LEVBLOCK_LOW+41) || type == LEVBLOCK_LOW+43); 		}		}}